plugins {
    id 'org.springframework.boot' version '2.6.8'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.6.21' // 코틀린 플러그인 추가
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.6.21' // 코틀린 JPA 플러그인 추가
    id 'org.jetbrains.kotlin.plugin.spring' version '1.6.21' // 코틀린 스프링 플러그인 추가 => 스프링 빈 클래스를 자동으로 열어줌(open을 붙일 필요 없음)
}

group = 'com.group'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8' // 코틀린 스탠다드 라이브러리 추가
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.6.21' // ClassNotFoundException: kotlin.reflect.full.KClasses를 해결하기 위함
    // 자바 DTO를 코틀린으로 변환하면서 JSON을 파싱하는 과정에서 인식을 못할 수도 있음 따라서 코틀린 전용 jackson 의존성을 추가해준다.
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.13.3'
    runtimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11" // 프로젝트의 자바 버전이 11이므로 코틀린도 11버전에서 동작하게 함
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11" // 프로젝트의 자바 버전이 11이므로 코틀린도 11버전에서 동작하게 함
    }
}